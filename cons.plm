cons:
do;

$include (glob.inc)

print_char: procedure (chr) public;
    declare chr byte;
    call dos_std_out(chr);
end print_char;

print_string: procedure (pstr) public;
    declare pstr pointer;
    declare str based pstr (*) byte;
    declare buf(256) byte;
    declare i byte;
    i = 0;
    do while str(i) <> 0;
        buf(i) = str(i);
        i = i + 1;
    end;
    buf(i) = EOL;
    call dos_std_string_out(@buf);
end print_string;

new_line: procedure public;
    call dos_std_string_out(@(CR, LF, EOL));
end new_line;

print_line: procedure (pstr) public;
    declare pstr pointer;
    call print_string(pstr);
    call new_line;
end print_line;

print$nibble: procedure (nibble);
    declare nibble byte;
    if nibble < 10 then
        call print_char('0' + nibble);
    else
        call print_char('a' + nibble - 10);
end print$nibble;

print_hex_byte: procedure (b) public;
    declare b byte;
    call print$nibble(b / 16);
    call print$nibble(b mod 16);
end print_hex_byte;

print_uint: procedure (num) public;
    declare num uint;
    declare i uint;
    declare buf (8) byte;

    buf(7) = 0;
    i = 6;
    if num = 0 then
        call print_char('0');
    else do;
        do while num > 0;
            buf(i) = (num mod 10) + '0';
            num = num / 10;
            i = i - 1;
        end;
        call print_string(@buf(i+1));
    end;
end print_uint;

read_line: procedure (len, pbuf) uint public;
    declare len byte;
    declare pbuf pointer;
    declare buf based pbuf (*) byte;
    declare l byte;
    declare i byte;
    buf(0) = len;
    call dos_buffered_std_in(@buf);
    l = buf(1);
    if l <> 0 then
    do;
        do i = 0 to l - 1;
            buf(i) = buf(i + 2);
        end;
    end;
    buf(l) = 0;
    call dos_std_string_out(@(CR, LF, EOL));
    return l;
end read_line;

end;

