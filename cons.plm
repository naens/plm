/****h* plm/cons
 *
 * NAME
 *   cons -- console input and output module
 *
 * DESCRIPTION
 *   This modules reads and writes data from and to the console.
 *
 ******
 */

cons:
do;

$include (glob.inc)

/****f* cons/print_char
 *
 * NAME
 *   print_char -- print a character to the console
 *
 * SYNOPSIS
 *   call print_char(chr);
 *
 * DESCRIPTION
 *   Print the character passed as parameter to the console standard output.
 *
 ******
 */
print_char: procedure (chr) public;
    declare chr byte;
    call dos_std_out(chr);
end print_char;

/****f* cons/print_string
 *
 * NAME
 *   print_string -- print a null-terminated string
 *
 * SYNOPSIS
 *   call print_string(p$str);
 *
 * DESCRIPTION
 *   Print the null-terminated string pointed by p$str.
 *
 ******
 */
print_string: procedure (pstr) public;
    declare pstr pointer;
    declare str based pstr (*) byte;
    declare buf(256) byte;
    declare i byte;
    i = 0;
    do while str(i) <> 0;
        buf(i) = str(i);
        i = i + 1;
    end;
    buf(i) = EOL;
    call dos_std_string_out(@buf);
end print_string;

/****f* cons/new_line
 *
 * NAME
 *   new_line -- print new line
 *
 * SYNOPSIS
 *   call new_line;
 *
 * DESCRIPTION
 *   Print the new line character or sequence of characters to the console.
 *
 ******
 */
new_line: procedure public;
    call dos_std_string_out(@(CR, LF, EOL));
end new_line;

/****f* cons/print_line
 *
 * NAME
 *   print_line -- print a null-terminated string with line end sequence
 *
 * SYNOPOSIS
 *   call print_line(p$str);
 *
 * DESCRIPTION
 *   Print the null-terminated string pointed by p$str and then print the
 *   line ending character(s).
 *
 ******
 */
print_line: procedure (pstr) public;
    declare pstr pointer;
    call print_string(pstr);
    call new_line;
end print_line;

print$nibble: procedure (nibble);
    declare nibble byte;
    if nibble < 10 then
        call print_char('0' + nibble);
    else
        call print_char('a' + nibble - 10);
end print$nibble;

/****f* cons/print_hex_byte
 *
 * NAME
 *   print_hex_byte -- print the hexadecimal representation of a byte
 *
 * SYNOPSIS
 *   call print_hex_byte(b);
 *
 * DESCRIPTION
 *   Print the lowercase hexadecimal representation of the given byte.
 *   Prepend with a leading zero if needed.
 *
 ******
 */
print_hex_byte: procedure (b) public;
    declare b byte;
    call print$nibble(b / 16);
    call print$nibble(b mod 16);
end print_hex_byte;

/****f* cons/print_uint
 *
 * NAME
 *   print_uint -- print unsigned integer
 *
 * SYNOPSIS
 *   call print_uint(num);
 *
 * DESCRIPTION
 *   Print the decimal representation of the unsigned integer.
 *
 ******
 */
print_uint: procedure (num) public;
    declare num uint;
    declare i uint;
    declare buf (8) byte;

    buf(7) = 0;
    i = 6;
    if num = 0 then
        call print_char('0');
    else do;
        do while num > 0;
            buf(i) = (num mod 10) + '0';
            num = num / 10;
            i = i - 1;
        end;
        call print_string(@buf(i+1));
    end;
end print_uint;

/****f* cons/read_line
 *
 * NAME
 *   read_line -- read one line from the console
 *
 * SYNOPSIS
 *   read_line(len, p$buf)
 *
 * DESCRIPTION
 *   Read into the location at p$buf a string of maximum len bytes.
 *   The value returned is the actual length of the stirng read,
 *   excluding the null terminator which is added at the end of
 *   the string.
 *
 ******
 */
read_line: procedure (len, p$buf) uint public;
    declare len byte;
    declare p$buf pointer;
    declare buf based p$buf (*) byte;
    declare l byte;
    declare i byte;
    buf(0) = len;
    call dos_buffered_std_in(@buf);
    l = buf(1);
    if l <> 0 then
    do;
        do i = 0 to l - 1;
            buf(i) = buf(i + 2);
        end;
    end;
    buf(l) = 0;
    call dos_std_string_out(@(CR, LF, EOL));
    return l;
end read_line;

end;

