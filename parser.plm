/****h* plm/parser
 *
 * NAME
 *   parser
 *
 ******
 */
parser:
do;

$include (glob.inc)
$include (extdcl.inc)

declare stack (80) byte;
declare stack$idx uint;

stack$push: procedure (x);
    declare x uint16;
    stack(stack$idx) = x mod 256;
    stack(stack$idx + 1) = x / 256;
    stack$idx = stack$idx + 2;
end stack$push;

stack$pop: procedure uint16;
    declare result uint16;
    stack$idx = stack$idx - 2;
    result = stack(stack$idx + 1) * 256;
    result = result + stack(stack$idx);
    return result;
end stack$pop;

/****f* parser/parse
 *
 * NAME
 *   parse -- parse the input, generate the output
 *
 * SYNOPSIS
 *   call parse;
 *
 * DESCRIPTION
 *   Parse PL/M code using the tokenizer (from the source known by the
 *   tokenizer) and generate output code using the code generator.
 *
 ******
 */
parse: procedure;
    call push(tok$identifier);
    call push(tok$colon);
    call push(tok$do);
    call push(tok$semicolon);
    call push(nt$body);
    call push(tok$end);
    call push(tok$semicolon);
    call push(tok$eof);

    call parse$loop;
end parse;

end parser;
