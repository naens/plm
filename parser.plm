$list
/****h* plm/parser
 *
 * NAME
 *   parser
 *
 ******
 */
parser:
do;

$include (..\plmlib\plmlib.inc)
$include (tokpars.inc)

declare stack (80) word;
declare stack$ptr uint;

stack$push: procedure (x);
    declare x uint16;
    stack(stack$ptr) = x;
    stack$ptr = stack$ptr + 1;
end stack$push;

stack$pop: procedure uint16;
    stack$ptr = stack$ptr - 1;
    return stack(stack$ptr);
end stack$pop;

/*** Parser rules ***/
/* TODO */

/*
parse$loop: procedure;
end parse$loop;
*/

/****f* parser/parse
 *
 * NAME
 *   parse -- parse the input, generate the output
 *
 * SYNOPSIS
 *   call parse;
 *
 * DESCRIPTION
 *   Parse PL/M code using the tokenizer (from the source known by the
 *   tokenizer) and generate output code using the code generator.
 *
 ******
 */
/*
parse: procedure;
end parse;
*/

parse$rule: procedure (start$rule, p$str) byte;
    declare start$rule uint;
    declare p$str pointer;
    declare str based p$str (*) byte;
    /* TODO */
/*    call stack$push(rule$start); */
    return 0FFh; /* TODO: fix: temporary */
end parse$rule;

end parser;

