readgen:
    do;

$include (d:iocld.src)

    declare pointer literally 'address';
    declare word literally 'address';
    declare boolean literally 'byte';
    declare true literally '1';
    declare false literally '0';

    declare space literally '20h';
    declare tab literally '9h';
    declare lf literally '0ah';
    declare cr literally '0dh';

    declare tail$start literally '80h';

    skip$spaces: procedure (p$str) pointer;
        declare p$str pointer;
        declare str based p$str byte;
        do while str = space or str = tab or str = lf or str = cr;
            p$str = p$str + 1;
        end;
        return p$str;
    end skip$spaces;

    print$string: procedure (p$str);
        declare p$str pointer;
        declare chr based p$str byte;
        do while chr <> 0;
            call wr$con(chr);
            p$str = p$str + 1;
        end;
    end print$string;

    print$char: procedure (chr);
        declare chr byte;
        call wr$con(chr);
    end print$char;

    new$line: procedure;
        call print$char(cr);
        call print$char(lf);
    end new$line;

    print$line: procedure (p$str);
        declare p$str pointer;
        call print$string(p$str);
        call new$line;
    end print$line;

    string$equal: procedure (p$str1, p$str2) boolean;
        declare (p$str1, p$str2) pointer;
        declare str1 based p$str1 byte;
        declare str2 based p$str2 byte;
        do while str1 <> 0 and str2 <> 0 and str1 = str2;
            p$str1 = p$str1 + 1;
            p$str2 = p$str2 + 1;
        end;
        return str1 = 0 and str2 = 0;
    end string$equal;


    /* TOKENIZER */
    /* reader variables */
    declare read$ptr pointer;   /* pointer to the current string */
    declare read$chr byte;
    declare read$index byte;     /* index into the current string */

    /* tokenizer variables */
    declare token$ready boolean;
    declare token$id byte;
    declare token$value word;
    declare token$str pointer;

    /* token ids */
    declare end$of$input literally '0';
    declare keyword literally '1';
    declare identifier literally '2';
    declare number literally '3';

    read$end: procedure boolean;
        return read$chr = 0;
    end read$end;

    /* check whether the character is an identifier or a keyword character */
    word$char: procedure (chr) boolean;
        declare chr byte;
        if chr >= 'a' and chr <= 'z' then
            return true;
        if chr >= 'A' and chr <= 'Z' then
            return true;
        if chr >= '0' and chr <= '9' then
            return true;
        if chr = '$' or chr = '_' then
            return true;
        return false;
    end word$char;

    next$char: procedure byte;
        return 0FFh;
    end next$char;

    /* read a string that may be an identifier or a keyword */
    readword: procedure;
        token$id = identifier;
        token$str = read$ptr;
        do while word$char(read$chr);
            read$ptr = read$ptr + 1;
        end;
        read$chr = 0;
    end read$word;


    read$char: procedure;
    end read$char;

    read$token: procedure;
        if read$end then
            token$id = end$of$input;
        else if word$char(next$char) then
            call read$word;
        else
            call read$char;
    end read$token;

    get$token: procedure byte;
        if not token$ready then
            call read$token;
        return token$id;
    end get$token;

    /* MAIN PROGRAM */
    declare p$tail pointer;
    declare b based p$tail byte;
    declare tail$len byte;
    declare p pointer;
    declare c based p byte;
    declare q pointer;

    p$tail = tail$start;
    tail$len = b;
    p$tail = p$tail + tail$len + 1;
    b = 0;
    p = skip$spaces(tail$start + 1);
    call print$string(.('string entered: {', 0));
    call print$string(p);
    call print$line(.('}', 0));
    call print$string(.('equal [ABC]? ', 0));
    if string$equal(p, .('ABC', 0)) then
        call print$line(.('YES!', 0));
    else
        call print$line(.('NO!!', 0));

end;
