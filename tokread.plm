/****h* plm/tokread
 *
 * NAME
 *   tokread -- Tokenizer and Reader module
 *
 * DESCRIPTION
 *   The tokread module is responsible for reading from a source file and to
 *   convert source code to tokens.  Tokens are items that correspond to units
 *   of code in the source file.  The different kinds of tokens are identified
 *   by the token identifier and for some kinds of tokens it also has data,
 *   which is either a number of a string.  Many tokens do not have additional
 *   information.
 *
 *   The Tokenizer and the Reader work together, and therefore have a common
 *   interface.  The tokenizer, being of a higher level than the reader,
 *   has the majority of the interface functions (read a token, go to next,
 *   and so on).  The only way the user should interact with the reader is when
 *   setting the source.  Duting the normal execution, the reader reads from
 *   source files which are given to the reader in the form of the filename.
 *   For debug purposes, it's also possible to read from a string.
 *
 *   This is how the tokread module works:
 *   * the user initializes the reader by setting the filename of the source
 *     file,
 *   * then to read one token the user calls get$token, which returns the
 *     identifier of the token read.  On end of input it returns the tok$eof
 *     token, which is consistent with how parsers are usually described in
 *     literature.
 *   * For additional data from the token, the value is stored in token$value
 *     if it's a token with a numeric value. And when the token
 *     is of a type that contains a string (identifiers and string literals),
 *     the pointer to the string is stored in token$string external variable
 *     Both the number and the string values are temporary, so if the user
 *     intends to keep them for later use, he has to make a copy of them.
 *   * When the user has finished using the token and wants to move to the next
 *     one, he calls the tok$next function.  This function does not return
 *     anything as its only purpose is to advance to the next token.  To check
 *     the end of input condition and the token, get$token is used.
 *
 ******
 */

tokread:
do;

$set (tokenizer)

$include (c:\plmprog\plmlib\plmlib.inc)
$include (toklit.inc)

/* READER */
/* reader variables */
declare reader$ptr pointer;   /* pointer to the current string */
declare reader$chr based reader$ptr (*) byte;
declare reader$idx uint;
declare reader$prev byte initial (0);
declare reader$saved byte initial (0);

/****f* tokread/reader$set$ptr
 *
 * NAME
 *   reader$set$ptr -- set reader string
 *
 * SYNOPSIS
 *   call reader$set$ptr(ptr);
 *
 * DESCRIPTION
 *   This is a procedure used to initialize a string that the reader will read.
 *   The ptr parameter is a pointer to a string that the reader should use.
 *   This procedure is only for debugging purposes and will perhaps be repaced
 *   or removed in later versions.
 *
 ******
 */
reader$set$ptr: procedure (ptr) public;
    declare ptr pointer;
    reader$ptr = ptr;
    reader$idx = 0;
end reader$set$ptr;

input$end: procedure boolean;
    return reader$chr(reader$idx) = 0;
end input$end;

get$char: procedure byte;
    if reader$saved = 0 then
        return reader$chr(reader$idx);
    else
        return reader$saved;
end get$char;

next$char: procedure;
    if reader$saved = 0 then
    do;
        reader$prev = reader$chr(reader$idx);
        reader$idx = reader$idx + 1;
    end;
    else
    do;
        reader$saved = 0;
    end;
end next$char;

unread$char: procedure;
    reader$saved = reader$prev;
end unread$char;

check$char: procedure (chr) boolean;
    declare chr byte;
    if not input$end then
    do;
        if chr = get$char then
        do;
            call next$char;
            return true;
        end;
    end;
    return false;
end check$char;

check$2chars: procedure (c1, c2) boolean;
    declare (c1, c2) byte;
    if check$char(c1) then
    do;
        if check$char(c2) then
            return true;
        else
            call unread$char;
    end;
    return false;
end check$2chars;


/* TOKENIZER */
/* tokenizer variables */
declare token$ready boolean initial (false);
declare token$id uint16;
declare token$value uint public;
declare token$string pointer public;
declare tbuf$len literally '80h';
declare tok$buf (tbuf$len) byte;

/* check whether it's a special character */
is$character: procedure (tok$id) boolean;
    declare tok$id byte;
    return (tok$id >= 40 and tok$id <= 47)
        or  (tok$id >= 58 and tok$id <= 64);
end is$character;

is$keyword: procedure (tok$id) boolean;
    declare tok$id byte;
    return tok$id >= 200 and tok$id <= 250;
end is$keyword;


/* check whether the character is an identifier or a keyword character */
word$char: procedure (chr) boolean;
    declare chr byte;
    if chr >= 'a' and chr <= 'z' then
        return true;
    if chr >= 'A' and chr <= 'Z' then
        return true;
    if chr >= '0' and chr <= '9' then
        return true;
    if chr = '$' or chr = '_' then
        return true;
    return false;
end word$char;

word$first: procedure (chr) boolean;
    declare chr byte;
    if chr >= 'a' and chr <= 'z' then
        return true;
    if chr >= 'A' and chr <= 'Z' then
        return true;
    return false;
end word$first;

/* check whether the character is a decimal digit */
dec$char: procedure (chr) boolean;
    declare chr byte;
    return chr >= '0' and chr <= '9';
end dec$char;

/* checks whether chr is equivalent to a space */
space$char: procedure (chr) boolean;
    declare chr byte;
    return chr = space or chr = tab or chr = lf or chr = cr;
end space$char;

/* skips characters equivalent to a space */
skip$spaces: procedure;
    do while space$char(get$char);
        call next$char;
    end;
end skip$spaces;

/* skip the comment after the '/*' sequence was read */
skip$comment: procedure;
    declare star$state boolean;
    star$state = false;
    do while not input$end and not (star$state and get$char = '/');
        star$state = (get$char = '*');
        call next$char;
    end;
    if not input$end then
        call next$char;
end skip$comment;

/* check if token$string is a keyword, and if so return it,
   otherwise return tok$ident
*/
str$tok$id: procedure uint16;
    if string_equal(token$string, @('declare', 0)) then
        return kw$declare;
    else if string_equal(token$string, @('byte', 0)) then
        return kw$byte;
    else if string_equal(token$string, @('do', 0)) then
        return kw$do;
    else if string_equal(token$string, @('end', 0)) then
        return kw$end;
    else if string_equal(token$string, @('if', 0)) then
        return kw$if;
    else if string_equal(token$string, @('then', 0)) then
        return kw$then;
    else if string_equal(token$string, @('else', 0)) then
        return kw$else;
    else /***/
        return tok$ident;
end str$tok$id;

/* read a string literal together with the terminating quote */
read$string: procedure;
    declare buffer$ptr pointer;
    declare buffer$chr based buffer$ptr (*) byte;
    declare i uint;

    i = 0;
    buffer$ptr = @tok$buf;
    token$string = buffer$ptr;
    call next$char;    /* skip the first quote character */
    /* TODO: implement two quote characters as quote character in string */
    /* check buffer length before writing */
    do while not input$end and get$char <> quote and i < tbuf$len - 1;
        buffer$chr(i) = get$char;
        i = i + 1;
        call next$char;
    end;
    buffer$chr(i) = 0;
    token$ready = true;
    token$id = tok$string;
    if not input$end then
        call next$char;
end read$string;


/* read a string that may be an identifier or a keyword */
read$word: procedure;
    declare buffer$ptr pointer;
    declare buffer$chr based buffer$ptr (*) byte;
    declare i uint;

    i = 0;
    buffer$ptr = @tok$buf;
    token$string = buffer$ptr;
    /* check buffer length before writing */
    do while not input$end and word$char(get$char) and i < tbuf$len - 1;
        if get$char <> '$' then
        do;
            buffer$chr(i) = char_lower(get$char);
            i = i + 1;
        end;
        call next$char;
    end;
    buffer$chr(i) = 0;
    token$ready = true;
    token$id = str$tok$id;
end read$word;

read$compare: procedure;
    if get$char = '=' then
        token$id = tok$equals;
    else if get$char = '>' then
    do;
        call next$char;
        if get$char = '=' then
            token$id = tok$geq;
        else
        do;
            token$id = tok$greater;
            call unread$char;
        end;
    end;
    else if get$char = '<' then
    do;
        call next$char;
        if get$char = '=' then
            token$id = tok$leq;
        else
        do;
            token$id = tok$lower;
            call unread$char;
        end;
    end;
    else
        token$id = tok$unknown;
end read$compare;
        

read$number: procedure;
    declare n uint;
    n = 0;
    do while dec$char(get$char);
        n = n * 10 + get$char - '0';
        call next$char;
    end;
    token$id = tok$number;
    token$value = n;
    token$ready = true;
end read$number;

read$char: procedure;
    if not input$end then
    do;
        token$value = get$char;
        /* for special characters, the ascii code serves as token id */
        token$id = get$char;
        call next$char;
        token$ready = true;
    end;
end read$char;

/****f* tokread/tok$next
 *
 * NAME
 *   tok$next -- go to next token
 *
 * SYNOPSIS
 *   call tok$next;
 *
 * DESCRIPTION
 *   This procedure advances the current token to the next one if not at the
 *   end of input.  Otherwise it does nothing.
 *
 ******
 */
tok$next: procedure public;
    call skip$spaces;    /* skip spaces before reading the next token */

    /* Skip all comments. */
    do while check$2chars('/', '*');
        call skip$comment;
        call skip$spaces;
    end;
    if input$end then
        token$id = tok$eof;
    else if get$char = quote then
        call read$string;
    else if get$char = '>' or get$char = '=' or get$char = '<' then
        call read$compare;
    else if dec$char(get$char) then
        call read$number;
    else if word$first(get$char) then
        call read$word;
    else
        call read$char;
end tok$next;

/****f* tokread/get$token
 *
 * NAME
 *   get$token -- get the id of the current token
 *
 * SYNOPSIS
 *   get$token
 *
 * DESCRIPTION
 *   Returns the id of the current token.  Should be called after the reader
 *   is initialized.  In this case it returns the current value without
 *   advancing the cursor.  When the end of input is reached, a special token
 *   with the id tok$eof is returned.
 *
 ******
 */
get$token: procedure byte public;
    if not token$ready then
        call tok$next;
    return token$id;
end get$token;

pr$chr$tok: procedure (tok$id);
    declare tok$id byte;
    call print_string(@('CHR[', 0));
    call print_char(low(token$value));
    call print_char(']');
end pr$chr$tok;

pr$kw$tok: procedure (tok$id);
    declare tok$id byte;
    if tok$id = kw$declare then
        call print_string(@('declare', 0));
    else if tok$id = kw$byte then
        call print_string(@('byte', 0));
    else if tok$id = kw$do then
        call print_string(@('do', 0));
    else if tok$id = kw$end then
        call print_string(@('end', 0));
    else if tok$id = kw$if then
        call print_string(@('if', 0));
    else if tok$id = kw$then then
        call print_string(@('then', 0));
    else if tok$id = kw$else then
        call print_string(@('else', 0));
end pr$kw$tok;

/****f* tokread/print$token
 *
 * NAME
 *   print$token -- print token
 *
 * SYNOPSIS
 *   call print$token;
 *
 * DESCRIPTION
 *   This procedure prints the current token in a text representation without
 *   any newline characters.
 *
 ******
 */
print$token: procedure public;
    if token$id = tok$ident then
    do;
        call print_string(@('id:', 0));
        call print_string(token$string);
        return;
    end;
    if token$id = tok$number then
    do;
        call print_string(@('num:', 0));
        call print_uint(token$value);
        return;
    end;
    if token$id = tok$string then
    do;
        call print_string(@('string: [', 0));
        call print_string(token$string);
        call print_char(']');
    end;
    else if token$id = tok$eof then
        call print_string(@('end of input', 0));
    else if is$character(token$id) then
        call pr$chr$tok(token$id);
    else if is$keyword(token$id) then
    do;
        call print_string(@('kw:', 0));
        call pr$kw$tok(token$id);
    end;
    else /***/
    do;
        call print_string(@('unknown:', 0));
        call print_uint(token$id);
    end;
end print$token;

end;
