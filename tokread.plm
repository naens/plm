    /* READER */
    /* reader variables */
    declare reader$ptr pointer;   /* pointer to the current string */
    declare reader$chr based reader$ptr byte;
    declare reader$prev byte initial (0);
    declare reader$saved byte initial (0);

    input$end: procedure boolean;
        return reader$chr = 0;
    end input$end;

    get$char: procedure byte;
        if reader$saved = 0 then
            return reader$chr;
        else
            return reader$saved;
    end get$char;

    next$char: procedure;
        if reader$saved = 0 then
        do;
            reader$prev = reader$chr;
            reader$ptr = reader$ptr + 1;
        end;
        else
        do;
            reader$saved = 0;
        end;
    end next$char;

    unread$char: procedure;
        reader$saved = reader$prev;
    end unread$char;

    check$char: procedure (chr) boolean;
        declare chr byte;
        if not input$end then
        do;
            if chr = get$char then
            do;
                call next$char;
                return true;
            end;
        end;
        return false;
    end check$char;

    check$2chars: procedure (c1, c2) boolean;
        declare (c1, c2) byte;
        if check$char(c1) then
        do;
            if check$char(c2) then
                return true;
            else
                call unread$char;
        end;
        return false;
    end check$2chars;


    /* TOKENIZER */
    /* tokenizer variables */
    declare token$ready boolean initial (false);
    declare token$id byte;
    declare token$value uint;
    declare token$str pointer;
    declare tbuf$len literally '80h';
    declare tok$buf (tbuf$len) byte;

    /* token ids */
    declare end$of$input literally '0';
    declare keyword literally '1';
    declare identifier literally '2';
    declare number literally '3';

    /* special characters */
    declare plus$char literally '100';
    declare minus$char literally '101';
    declare star literally '102';
    declare slash literally '103';
    declare lower literally '104';
    declare greater literally '105';
    declare equals literally '106';
    declare colon literally '107';
    declare semicolon literally '108';
    declare par$op literally '109';
    declare par$cl literally '110';
    declare at$chr literally '111';
    declare underscore literally '112';

    declare unknown$char literally '0ffh';


    /* check whether the character is an identifier or a keyword character */
    word$char: procedure (chr) boolean;
        declare chr byte;
        if chr >= 'a' and chr <= 'z' then
            return true;
        if chr >= 'A' and chr <= 'Z' then
            return true;
/*
        if chr >= '0' and chr <= '9' then
            return true;
        if chr = '$' or chr = '_' then
            return true;
*/
        return false;
    end word$char;

    /* check whether the character is a decimal digit */
    dec$char: procedure (chr) boolean;
        declare chr byte;
        return chr >= '0' and chr <= '9';
    end dec$char;

    /* checks whether chr is equivalent to a space */
    space$char: procedure (chr) boolean;
        declare chr byte;
        return chr = space or chr = tab or chr = lf or chr = cr;
    end space$char;

    /* skips characters equivalent to a space */
    /* TODO: also skip comments */
    skip$spaces: procedure;
        do while space$char(get$char);
            call next$char;
        end;
    end skip$spaces;

    /* skip the comment after the '/*' sequence was read */
    skip$comment: procedure;
        declare star$state boolean;
        star$state = false;
        do while not input$end and not (star$state and get$char = '/');
            star$state = (get$char = '*');
            call next$char;
        end;
        if not input$end then
            call next$char;
    end skip$comment;

    /* read a string that may be an identifier or a keyword */
    read$word: procedure;
        declare buffer$ptr pointer;
        declare buffer$chr based buffer$ptr byte;
        buffer$ptr = .tok$buf;
        token$id = identifier;
        token$str = buffer$ptr;
        /* TODO: check buffer length before writing! */
        /* buffer length is in constant tbuf$len */
        do while not input$end and word$char(get$char);
            buffer$chr = get$char;
            buffer$ptr = buffer$ptr + 1;
            call next$char;
        end;
        buffer$chr = 0;
        token$ready = true;
    end read$word;

    /* read a number from the input */
    read$number: procedure ;
        declare n uint;
        n = 0;
        do while dec$char(get$char);
            n = n * 10 + get$char - '0';
            call next$char;
        end;
        token$id = number;
        token$value = n;
        token$ready = true;
    end read$number;

    read$char: procedure;
        call print$string(.('[readchar:',0));
        call print$char(reader$chr);
        call print$char(':');
        call print$number(reader$chr);
        call print$char(']');
        if not input$end then
        do;
            if get$char = '+' then
                token$id = plus$char;
            else if get$char = '-' then
                token$id = minus$char;
            else if get$char = '*' then
                token$id = star;
            else if get$char = '/' then
                token$id = slash;
            else
                token$id = unknown$char;
            call next$char;
            token$ready = true;
        end;
    end read$char;

    read$token: procedure;
        call skip$spaces;    /* skip spaces before reading the next token */

        /* Skip all comments. */
        do while check$2chars('/', '*');
            call skip$comment;
            call skip$spaces;
        end;
        if input$end then
            token$id = end$of$input;
        else if dec$char(get$char) then
            call read$number;
        else if word$char(get$char) then
            call read$word;
        else
            call read$char;
    end read$token;

    get$token: procedure byte;
        if not token$ready then
            call read$token;
        return token$id;
    end get$token;


    /* print token without new line */
    print$token: procedure;
        call print$string(.('TOKEN: ', 0));
        if token$id = identifier then
        do;
            call print$string(.('IDENTIFIER:', 0));
            call print$string(token$str);
        end;
        else if token$id = number then
        do;
            call print$string(.('NUMBER:', 0));
            call print$number(token$value);
        end;
        else if token$id = end$of$input then
            call print$string(.('END OF INPUT', 0));
        else
        do;
            call print$string(.('UNKNOWN TOKEN:', 0));
            call print$number(token$id);
        end;
    end print$token;

